heat_template_version: 2013-05-23

description: |
  A single Windows server running
  [IIS](http://www.iis.net/), [ASP .Net 4.5.1](http://www.asp.net/)
  and a FTP site.

parameter_groups:

- label: Server Settings
  parameters:
  - server_hostname
  - image
  - flavor

- label: ASP .Net Application Settings
  parameters:
  - domain
  - ftp_username
  - aspdotnet_version

parameters:

  # Server settings
  server_hostname:
    label: Server Hostname
    description: Hostname to use for the server that's built.
    type: string
    default: ASPdotNet
    description: Windows Server Name

  image:
    label: Operating System
    description: |
      Required: Server image used for all servers that are created as a part of
      this deployment.
    type: string
    default: Windows Server 2012 R2
    constraints:
    - allowed_values:
      - Windows Server 2008 R2 SP1
      - Windows Server 2008 R2 SP1 + SQL Server 2008 R2 SP2 Standard
      - Windows Server 2008 R2 SP1 + SQL Server 2008 R2 SP2 Web
      - Windows Server 2012
      - Windows Server 2012 + SQL Server 2012 SP1 Standard
      - Windows Server 2012 + SQL Server 2012 SP1 Web
      - Windows Server 2012 R2 + SQL Server 2014 Standard
      - Windows Server 2012 R2 + SQL Server 2014 Web
      - Windows Server 2012 R2
      description: must be a supported OS

  flavor:
    label: Server Size
    description: |
      Cloud Server size to use for the database server. Sizes refer to the
      amount of RAM allocated to the server.
    type: string
    default: 4 GB General Purpose v1
    constraints:
    - allowed_values:
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud Server flavor.

  # ASP .Net settings
  domain:
    label: Site Domain
    description: Domain to be used with the ASP .net site
    type: string
    default: "example.com"
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name

  ftp_username:
    label: FTP Username
    description: |
      FTP Username for the site. A password will be randomly generated for this
      account.
    type: string
    default: "ftp_user"
    constraints:
    - allowed_pattern: "^(?!^root$)([a-z0-9_]{1,16})$"
      description: Must be a valid username

  aspdotnet_version:
    label: ASP .Net Version
    description: Version of ASP .Net to install (4.5.1 includes 3.5 and 4.0)
    type: string
    default: 4.5.1

resources:

  rs_windows_server:
    type: "Rackspace::Cloud::WinServer"
    properties:
      name: { get_param: server_hostname }
      flavor: { get_param: flavor }
      image: { get_param: image }
      save_admin_pass: true
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
      user_data:
        str_replace:
          template: |
            #region Deployment of IIS, FTP and ASP .Net Site
            Function Deploy-AspdotNet
            {
                [CmdletBinding()]
                Param(
                    [String]$DomainName = 'example.com',
                    [String]$FtpUserName = 'ftp_user',
                    [String]$FtpPassword ,
                    [String]$Logfile = 'C:\Windows\Temp\Deploy-AspdotNet.log'
                )
                Set-Content -Path .\super.txt -Value $FtpPassword
                #region Create Log File
                if (!( Test-Path $Logfile))
                {
                    New-Item -Path 'C:\Windows\Temp\Deploy-AspdotNet.log' -ItemType file
                }
                #endregion
                #region Write Log file
                Function WriteLog
                {
                    Param ([string]$logstring)
                    Add-Content $Logfile -Value $logstring
                }
                #endregion
                #region Variables
                $webRoot = "$env:systemdrive\inetpub\wwwroot\"
                $webFolder = $webRoot + $DomainName
                $appPoolName = $DomainName
                $siteName = $DomainName
                $ftpName = 'ftp_' + $DomainName
                $appPoolIdentity = "IIS AppPool\$appPoolName"
                #endregion

                #region Get Os Info
                Function Get-OperatingSystemVersion
                {
                    $os = (Get-WmiObject -Class Win32_OperatingSystem)
                    $osOuput = [ordered]@{
                        'version' = $os.version
                        'name'  = $os.caption
                    }
                    $Output = [pscustomobject]@{
                        'OS' = $osOuput 
                    }
                    $Output
                }
                #endregion
                            
                            
                #region Create Automation Login
                Function Create-User 
                {
                     param
                     (
                         [Object]
                         $User,

                         [Object]
                         $Password
                     )

                    try
                    {
                        if($Password -match $null)
                        {
                            Write-Host -Object "[$(Get-Date)] Error: wffadmin is set with the password $Password"
                        }
                        $hostname = $env:ComputerName
                        $objComputer = [ADSI]("WinNT://$hostname,computer")
                        $colUsers = ($objComputer.psbase.children |
                            Where-Object -FilterScript {
                                $_.psBase.schemaClassName -eq 'User'
                            } |
                        Select-Object -ExpandProperty Name)
                        if($colUsers -contains $User)
                        {
                            ([ADSI]("WinNT://$hostname/$User")).SetPassword($Password)
                            WMIC.exe USERACCOUNT WHERE "Name='$User'" SET PasswordExpires=FALSE >$null
                            Write-Host -Object "[$(Get-Date)] Status: Completed $User update with password $Password"
                        }
                        else 
                        {
                            net.exe user /add $User $Password /expires:never /passwordchg:no /comment:"Automation" > $null
                            WMIC.exe USERACCOUNT WHERE "Name='$User'" SET PasswordExpires=FALSE > $null
                            net.exe localgroup administrators $User /add > $null
                            Write-Host -Object "[$(Get-Date)] Status: Completed $User creation with password $Password"
                            #return $Password
                        }
                    }
                    catch [Exception] 
                    {
                        Write-Host -Object "[$(Get-Date)] Error: $_"
                        return
                    }
                }
                #endregion
                #region Install IIS and ASP
                Function Install-AspWebServer
                {
                    Write-Host -Object "[$(Get-Date)] Installing IIS and ASP .Net"
                    Import-Module -Name servermanager
                            
                    $2012IISFeatures = 'Web-CertProvider', 'Web-Net-Ext45', 'Web-WebSockets', 'Web-AppInit', 'Web-Asp-Net45'
                    $CommonIISFeatures = 'Web-Server', 'Web-WebServer', 'Web-Common-Http', 'Web-Default-Doc', 'Web-Dir-Browsing', 'Web-Http-Errors', 'Web-Static-Content', 'Web-Http-Redirect', 'Web-Health', 'Web-Http-Logging', 'Web-Custom-Logging', 'Web-Log-Libraries', 'Web-ODBC-Logging', 'Web-Request-Monitor', 'Web-Http-Tracing', 'Web-Performance', 'Web-Stat-Compression', 'Web-Dyn-Compression', 'Web-Security', 'Web-Filtering', 'Web-Basic-Auth', 'Web-Client-Auth', 'Web-Digest-Auth', 'Web-Cert-Auth', 'Web-IP-Security', 'Web-Url-Auth', 'Web-Windows-Auth', 'Web-App-Dev', 'Web-Net-Ext', 'Web-ASP', 'Web-Asp-Net', 'Web-CGI', 'Web-ISAPI-Ext', 'Web-ISAPI-Filter', 'Web-Includes', 'Web-Mgmt-Tools', 'Web-Mgmt-Console', 'Web-Mgmt-Compat', 'Web-Metabase', 'Web-Lgcy-Mgmt-Console', 'Web-Scripting-Tools'

                    Write-Host -Object "[$(Get-Date)] Installing IIS Features"
                    Add-WindowsFeature $CommonIISFeatures

                    $OsVersion = (Get-OperatingSystemVersion).os.version
                    if($OsVersion -match '6.2' -or $OsVersion -match '6.3')
                    {
                        Write-Host -Object "[$(Get-Date)] Installing Windows 2012 IIS features"
                        Add-WindowsFeature $2012IISFeatures
                    }
                }
                #endregion
                #region Install FTP
                Function Install-FTPserver
                {
                    Import-Module -Name ServerManager
                    $out = Add-WindowsFeature -Name Web-Ftp-Server -IncludeAllSubFeature
                    if ($out.ExitCode -eq 'NoChangeNeeded')
                    {
                        Write-Host -Object "[$(Get-Date)] FTP server is already installed"
                    }
                    else 
                    {
                        Write-Host -Object "[$(Get-Date)] FTP Server and dependencies have been installed"
                    }
                }
                #endregion
                #region Create A Website in IIS
                Function Create-Website 
                {
                     param
                     (
                         [Object]
                         $webSiteName,

                         [Object]
                         $webSiteFolder,

                         [Object]
                         $webAppPoolName
                     )

                    try
                    {
                        Write-Host -Object "[$(Get-Date)] Creating the $webSiteName"
                        New-Item $webSiteFolder -type directory -Force >$null
                              
                        Import-Module -Name WebAdministration
                        Stop-Website -Name 'Default Web Site'
                        New-WebAppPool $webAppPoolName > $null
                        New-Website -Name $webSiteName -Port 80 -IPAddress '*' -HostHeader $webSiteName -PhysicalPath $webSiteFolder -ApplicationPool $webAppPoolName -Force > $null
                    }
                    catch
                    {
                        throw "Error : $_"
                    }
                }
                #endregion
                #region Remove a Website in IIS
                Function Remove-Website
                {
                     param
                     (
                         [Object]
                         $webAppPoolName,

                         [Object]
                         $webSiteFolder,

                         [Object]
                         $webSiteName
                     )

                    try
                    {
                        if($webSiteFolder -ne $null)
                        {
                            if((Test-Path -PathType Container -Path $webSiteFolder))
                            {
                                $siteStatus = Get-Website -Name $webSiteName
                                $siteAppPoolStatus = Get-Item -Path "IIS:\AppPools\$webSiteName"
                                if((Get-WebsiteState -Name "$webSiteName").Value -ne 'Stopped') 
                                {
                                    $siteStatus.Stop()
                                }
                                if((Get-WebAppPoolState -Name $webAppPoolName).Value -ne 'Stopped') 
                                {
                                    $siteAppPoolStatus.Stop()
                                }
                                Write-Host -Object "[$(Get-Date)] Removing the Web site $webSiteName"
                                Remove-Website -Name $webSiteName
                                Write-Host -Object "[$(Get-Date)] Removing the Application pool $webAppPoolName"
                                Remove-WebAppPool -Name $webAppPoolName
                                Write-Host -Object "[$(Get-Date)] Removing the Site Directory if $webAppPoolName"
                                Remove-Item $webSiteFolder -Recurse -Force
                            }
                            else
                            {
                                Write-Host -Object "[$(Get-Date)] The site $webSiteName is not present"
                            }
                        }
                    }
                    catch
                    {
                        throw "Error : $_"
                    }
                }
                #endregion
                #region Create a FTP site
                Function Create-FtpSite
                {
                     param
                     (
                         [Object]
                         $DefaultFtpSiteName,

                         [Object]
                         $DefaultFtpUser,

                         [Object]
                         $DefaultFtpPassword
                     )

                    function New-SelfSignedCert
                    {
                        [CmdletBinding()]
                        [OutputType([int])]
                        Param
                        (
                            [Parameter(Mandatory = $true,
                                    ValueFromPipeLine = $true,
                            Position = 0)]
                            [string[]]$Subject = 'demo.demo.com'
                            ,
                            [Parameter(Mandatory = $true,
                                    ValueFromPipelineByPropertyName = $true,
                            Position = 1)]
                            [ValidateSet('User','Computer')]
                            [string]$CertStore = 'Computer'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$EKU_ServerAuth = 'Y'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$EKU_ClientAuth = 'Y'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$EKU_SmartCardAuth = 'Y'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$EKU_EncryptFileSystem = 'Y'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$EKU_CodeSigning = 'Y'
                            ,
                            [ValidateSet('Y','N')]
                            [string]$AsTrustedRootCert = 'N'
                        )
                        Begin{
                            $ErrorActionPreference = 'SilentlyContinue'
                            If ($CertStore -eq 'User')
                            {
                                $machineContext = 0
                                $initContext = 1
                            }
                            ElseIF ($CertStore -eq 'Computer')
                            {
                                $machineContext = 1
                                $initContext = 2
                            }
                            Else
                            {
                                Write-Error -Message 'Invalid selection'
                                Exit
                            }
                        }
                        Process{
                            $os = (Get-WmiObject -Class Win32_OperatingSystem).Version
                            if ($os[0] -ge 6) 
                            {
                                foreach ($sub in $Subject)
                                {
                                    #Generate cert in local computer My store
                                    $name = New-Object -ComObject 'X509Enrollment.CX500DistinguishedName.1'
                                    $name.Encode("CN=$sub", 0)
                                    $key = New-Object -ComObject 'X509Enrollment.CX509PrivateKey.1'
                                    $key.ProviderName = 'Microsoft RSA SChannel Cryptographic Provider'
                                    $key.KeySpec = 1
                                    $key.Length = 2048
                                    $key.SecurityDescriptor = 'D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)'
                                    $key.MachineContext = $machineContext
                                    $key.ExportPolicy = 1
                                    $key.Create()
                                    $ekuoids = New-Object -ComObject 'X509Enrollment.CObjectIds.1'
                                    #Enhanced Key Usage `(EKU`) by answering Y/N
                                    If ($EKU_ServerAuth -eq 'Y')
                                    {
                                        $serverauthoid = New-Object -ComObject 'X509Enrollment.CObjectId.1'
                                        $serverauthoid.InitializeFromValue('1.3.6.1.5.5.7.3.1')
                                        $ekuoids.add($serverauthoid)
                                    }
                                    If ($EKU_ClientAuth -eq 'Y')
                                    {
                                        $clientauthoid = New-Object -ComObject 'X509Enrollment.CObjectId.1'
                                        $clientauthoid.InitializeFromValue('1.3.6.1.5.5.7.3.2')
                                        $ekuoids.add($clientauthoid)
                                    }
                                    If ($EKU_SmartCardAuth -eq 'Y')
                                    {
                                        $smartcardoid = New-Object -ComObject 'X509Enrollment.CObjectId.1'
                                        $smartcardoid.InitializeFromValue('1.3.6.1.4.1.311.20.2.2')
                                        $ekuoids.add($smartcardoid)
                                    }
                                    If ($EKU_EncryptFileSystem -eq 'Y')
                                    {
                                        $efsoid = New-Object -ComObject 'X509Enrollment.CObjectId.1'
                                        $efsoid.InitializeFromValue('1.3.6.1.4.1.311.10.3.4')
                                        $ekuoids.add($efsoid)
                                    }
                                    If ($EKU_CodeSigning -eq 'Y')
                                    {
                                        $codesigningoid = New-Object -ComObject 'X509Enrollment.CObjectId.1'
                                        $codesigningoid.InitializeFromValue('1.3.6.1.5.5.7.3.3')
                                        $ekuoids.add($codesigningoid)
                                    }
                                    $ekuext = New-Object -ComObject 'X509Enrollment.CX509ExtensionEnhancedKeyUsage.1'
                                    $ekuext.InitializeEncode($ekuoids)
                                    $cert = New-Object -ComObject 'X509Enrollment.CX509CertificateRequestCertificate.1'
                                    $cert.InitializeFromPrivateKey($initContext, $key, '')
                                    $cert.Subject = $name
                                    $cert.Issuer = $cert.Subject
                                    $cert.NotBefore = Get-Date
                                    $cert.NotAfter = $cert.NotBefore.AddDays(3650)
                                    $cert.X509Extensions.Add($ekuext)
                                    $cert.Encode()
                                    $enrollment = New-Object -ComObject 'X509Enrollment.CX509Enrollment.1'
                                    $enrollment.InitializeFromRequest($cert)
                                    $certdata = $enrollment.CreateRequest(1)
                                    $enrollment.InstallResponse(2, $certdata, 1, '')
                                    Write-Verbose -Message "$($sub) has been added the Certificate to the Store $($CertStore)"
                                    #Install the certificate to Trusted Root Certification Authorities
                                    if ($AsTrustedRootCert -eq 'Y') 
                                    {
                                        [Byte[]]$bytes = [System.Convert]::FromBase64String($certdata)
                                        foreach ($Store in 'Root', 'TrustedPublisher') 
                                        {
                                            $x509store = New-Object -TypeName Security.Cryptography.X509Certificates.X509Store -ArgumentList $Store, 'LocalMachine'
                                            $x509store.Open([Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
                                            $x509store.Add([Security.Cryptography.X509Certificates.X509Certificate2]$bytes)
                                            $x509store.Close()
                                        }
                                    }
                                    Write-Verbose -Message "$($sub) has been added the Certificate to the Store $($Store)"
                                }
                            }
                            else
                            {
                                Write-Warning -Message 'The Operating System must be at LEAST Windows Server 2008'
                            }
                        }
                        End{
                            Write-Host -Object 'Completed :: New Certificate(s) Created and Installed' -ForegroundColor Green
                            Write-Verbose -Message 'Execution finished...'
                        }
                    }
                    Import-Module -Name WebAdministration
                    $DefaultFtpPath = 'c:\inetpub\wwwroot\'
                    $DefaultNonSecureFtpPort = 21
                    # Create FTP user Account
                    net.exe user /add $DefaultFtpUser $DefaultFtpPassword > $null
                    Write-Host -Object "[$(Get-Date)] Completed '$DefaultFtpUser' creation"
                    New-WebFtpSite -Name $DefaultFtpSiteName -PhysicalPath $DefaultFtpPath -Port $DefaultNonSecureFtpPort -IPAddress * > $null
                    # Apply permissions to wwwroot Folder
                    $acl = (Get-Item $DefaultFtpPath).GetAccessControl('Access')
                    $rule = New-Object -TypeName System.Security.AccessControl.FileSystemAccessRule -ArgumentList ($DefaultFtpUser, 'Modify', 'ContainerInherit, ObjectInherit', 'None', 'Allow')
                    $acl.AddAccessRule($rule)
                    Set-Acl $DefaultFtpPath -AclObject $acl
                    # Configure IIS Site Properties
                    Set-ItemProperty -Path IIS:\Sites\$DefaultFtpSiteName -Name ftpServer.security.ssl.controlChannelPolicy -Value 0
                    Set-ItemProperty -Path IIS:\Sites\$DefaultFtpSiteName -Name ftpServer.security.ssl.dataChannelPolicy -Value 0
                    Set-ItemProperty -Path IIS:\Sites\$DefaultFtpSiteName -Name ftpServer.security.ssl.ssl128 -Value $true
                    Set-ItemProperty -Path IIS:\Sites\$DefaultFtpSiteName -Name ftpServer.security.authentication.basicAuthentication.enabled -Value $true
                    # Alter FTPServer Configuration
                    # Add Allow rule for our ftpGroup (Permission=3 ==> Read+Write)
                    Add-WebConfiguration '/system.ftpServer/security/authorization' -value @{
                        accessType  = 'Allow'
                        users       = $DefaultFtpUser
                        permissions = 3
                    } -PSPath IIS:\ -location $DefaultFtpSiteName
                    # Change the lower and upper dataChannel ports
                    $firewallSupport = Get-WebConfiguration system.ftpServer/firewallSupport
                    $firewallSupport.lowDataChannelPort = 5001
                    $firewallSupport.highDataChannelPort = 5050
                    $firewallSupport | Set-WebConfiguration system.ftpServer/firewallSupport
                    New-SelfSignedCert -Subject $DefaultFtpSiteName -CertStore Computer -EKU_ServerAuth Y -EKU_ClientAuth Y -EKU_SmartCardAuth Y -EKU_EncryptFileSystem Y -EKU_CodeSigning Y -AsTrustedRootCert Y > $null
                    Set-Location -Path Microsoft.PowerShell.Security\Certificate::localmachine\my
                    $cert = Get-ChildItem |
                    Where-Object -FilterScript {
                        $_.subject -match $DefaultFtpSiteName 
                    } |
                    Select-Object -Property thumbprint |
                    ForEach-Object -Process {
                        $_.thumbprint 
                    }
                    Set-ItemProperty -Path IIS:\Sites\$DefaultFtpSiteName -Name ftpServer.security.ssl.serverCertHash -Value $cert
                    Write-Host -Object "[$(Get-Date)] FTP Certificate $cert"
                    Write-Host -Object "[$(Get-Date)] Completed $DefaultFtpSiteName creation"
                    netsh.exe advfirewall set global StatefulFTP disable > $null
                    Write-Host -Object "[$(Get-Date)] Stateful FTP is disabled"
                    Write-Host -Object "[$(Get-Date)] Restart FTP service"
                    Restart-Service -Name ftpsvc > $null
                    Set-Location -Path c:\
                }
                #endregion
                #region Enable HTTP and HTTPS ports
                Function Enable-WebServerFirewall()
                {
                    Write-Host -Object "[$(Get-Date)] Enabling port 80"
                    netsh.exe advfirewall firewall set rule group="World Wide Web Services (HTTP)" new enable=yes > $null
                    Write-Host -Object "[$(Get-Date)] Enabling port 443"
                    netsh.exe advfirewall firewall set rule group="Secure World Wide Web Services (HTTPS)" new enable=yes > $null
                }
                #endregion
                #region Clean Deployment
                Function Clean-Deployment
                {
                    #region Remove Automation initial firewall rule opener
                    if((Test-Path -Path 'C:\Cloud-Automation'))
                    {
                        Remove-Item -Path 'C:\Cloud-Automation' -Recurse > $null
                    }
                    #endregion
                    #region Schedule Task to remove the Psexec firewall rule
                    $DeletePsexec = {
                        Remove-Item -Path $MyINvocation.InvocationName
                        $find_rule = netsh.exe advfirewall firewall show rule 'PSexec Port'
                        if ($find_rule -notcontains 'No rules match the specified criteria.') 
                        {
                            Write-Host -Object 'Deleting firewall rule'
                            netsh.exe advfirewall firewall delete rule name="PSexec Port" > $null
                        }
                    }
                    $Cleaner = 'C:\Windows\Temp\cleanup.ps1'
                    Set-Content $Cleaner -Value $DeletePsexec
                    $ST_Username = 'autoadmin'
                    net.exe user /add $ST_Username $FtpPassword
                    net.exe localgroup administrators $ST_Username /add
                    $ST_Exec = 'C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe'
                    $ST_Arg = '-NoLogo -NonInteractive -WindowStyle Hidden -ExecutionPolicy ByPass C:\Windows\Temp\cleanup.ps1'
                    $ST_A_Deploy_Cleaner = New-ScheduledTaskAction -Execute $ST_Exec -Argument $ST_Arg
                    $ST_T_Deploy_Cleaner = New-ScheduledTaskTrigger -Once -At ((Get-Date).AddMinutes(2))
                    $ST_S_Deploy_Cleaner = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -WakeToRun -DontStopIfGoingOnBatteries -StartWhenAvailable -MultipleInstances Parallel
                    #$ST_ST_Deploy_Cleaner = New-ScheduledTask -Action $ST_A_Deploy_Cleaner -Trigger $ST_T_Deploy_Cleaner -Settings $ST_S_Deploy_Cleaner
                    Register-ScheduledTask -TaskName 'Clean Automation' -TaskPath \ -RunLevel Highest -Action $ST_A_Deploy_Cleaner -Trigger $ST_T_Deploy_Cleaner -Settings $ST_S_Deploy_Cleaner -User $ST_Username -Password $FtpPassword *>> $Logfile
                    #endregion
                }
                #endregion
                #region MAIN
                Install-AspWebServer
                Install-FTPserver
                Create-Website -webSiteName $siteName -webSiteFolder $webFolder -webAppPoolName $appPoolName
                Set-Content -Path .\super.txt -Value "$FtpPassword"
                Create-FtpSite -DefaultFtpSiteName $ftpName -DefaultFtpUser $FtpUserName -DefaultFtpPassword $FtpPassword
                Enable-WebServerFirewall
                Clean-Deployment
                #endregion
            }
            #endregion
            #region MAIN : Deploy ASP .Net site with FTP
            #region Delete myself from the filesystem during execution
            Remove-Item -Path $MyINvocation.InvocationName
            #endregion
            Deploy-AspdotNet -DomainName "%%sitedomain" -FtpUserName "%%FtpUserName" -FtpPassword "%%FtpPassword"
            #endregion

          params:
            "%%sitedomain" : { get_param:  domain }
            "%%ftpusername" : { get_param: ftp_username }
            "%%ftppassword" : { get_attr: [ftp_password,value] }

  # Random password generation
  ftp_password:
    type: OS::Heat::RandomString
    properties:
      length: 14
      character_classes:
        - class: digits
          min: 1
        - class: uppercase
          min: 1
        - class: lowercase
          min: 1

outputs:

  server_ip:
    value: { get_attr: [ rs_windows_server, accessIPv4 ] }
    description: Server IP

  admin_password:
    value: { get_attr: [ rs_windows_server, admin_pass] }
    description: Administrator Password

  site_domain:
    description: Website Domain name
    value: { get_param: domain }

  site_ftp_user:
    description: FTP User
    value: { get_param: ftp_username }

  site_ftp_password:
    description: FTP Password
    value: { get_attr: [ftp_password, value] }
